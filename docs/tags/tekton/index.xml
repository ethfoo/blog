<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Tekton - 标签 - Ethfoo&#39;s Blog</title>
        <link>http://example.org/tags/tekton/</link>
        <description>Tekton - 标签 - Ethfoo&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>ethfoo@163.com (ethfoo)</managingEditor>
            <webMaster>ethfoo@163.com (ethfoo)</webMaster><lastBuildDate>Sun, 25 Aug 2019 20:36:15 &#43;0800</lastBuildDate><atom:link href="http://example.org/tags/tekton/" rel="self" type="application/rss+xml" /><item>
    <title>Kubernetes原生CICD工具：Tekton探秘与上手实践</title>
    <link>http://example.org/posts/cicd/kubernetes%E5%8E%9F%E7%94%9Fcicd%E5%B7%A5%E5%85%B7tekton%E6%8E%A2%E7%A7%98%E4%B8%8E%E4%B8%8A%E6%89%8B%E5%AE%9E%E8%B7%B5/</link>
    <pubDate>Sun, 25 Aug 2019 20:36:15 &#43;0800</pubDate>
    <author>作者</author>
    <guid>http://example.org/posts/cicd/kubernetes%E5%8E%9F%E7%94%9Fcicd%E5%B7%A5%E5%85%B7tekton%E6%8E%A2%E7%A7%98%E4%B8%8E%E4%B8%8A%E6%89%8B%E5%AE%9E%E8%B7%B5/</guid>
    <description><![CDATA[引子 如果有关注过Knative社区动态的同学，可能会知道最近发生了一件比较大的新闻，三大组件之一的build项目被人提了一个很残忍的Proposal（https://github.com/knative/build/issues/614），并且专门在项目Readme的开头加了个NOTE：
NOTE  There is an open proposal to deprecate this component in favor of Tekton Pipelines. If you are a new user, consider using Tekton Pipelines, or another tool, to build and release. If you use Knative Build today, please give feedback on the deprecation proposal.   这个Proposal的目的是想要废弃Knative的build模块，Knative只专注做serverless，而将build模块代表的CI/CD功能全盘交出，让用户自己选择合适的CI/CD工具。Knative只负责将镜像运行，同时提供serverless相关的事件驱动等功能，不再关心镜像的构建过程。
虽然目前为止，该Proposal还在开放征求社区的意见，不过，从留言来看，build模块未来还是大概率会被deprecate。因为Knative build的替代者Tekton已经展露头脚，表现出更强大的基于kubernetes的CI/CD能力，Tekton的设计思路其实也是来源于Knative build的，现有用户也可以很方便的从build迁移至Tekton。
Tekton是什么 Tekton是一个谷歌开源的kubernetes原生CI/CD系统，功能强大且灵活，开源社区也正在快速的迭代和发展壮大。google cloud已经推出了基于Tekton的服务（https://cloud.google.com/Tekton/）。
其实Tekton的前身是Knative的build-pipeline项目，从名字可以看出这个项目是为了给build模块增加pipeline的功能，但是大家发现随着不同的功能加入到Knative build模块中，build模块越来越变得像一个通用的CI/CD系统，这已经脱离了Knative build设计的初衷，于是，索性将build-pipeline剥离出Knative，摇身一变成为Tekton，而Tekton也从此致力于提供全功能、标准化的原生kubernetesCI/CD解决方案。
Tekton虽然还是一个挺新的项目，但是已经成为 Continuous Delivery Foundation (CDF) 的四个初始项目之一，另外三个则是大名鼎鼎的Jenkins、Jenkins X、Spinnaker，实际上Tekton还可以作为插件集成到JenkinsX中。所以，如果你觉得Jenkins太重，没必要用Spinnaker这种专注于多云平台的CD，为了避免和Gitlab耦合不想用gitlab-ci，那么Tekton值得一试。
Tekton的特点是kubernetes原生，什么是kubernetes原生呢？简单的理解，就是all in kubernetes，所以用容器化的方式构建容器镜像是必然，另外，基于kubernetes CRD定义的pipeline流水线也是Tekton最重要的特征。]]></description>
</item></channel>
</rss>
